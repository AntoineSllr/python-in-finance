import numpy as np
from scipy.stats import norm


def black_scholes_european(S0, K, T, r, sigma, option_type="call"):
    """Prix de l'option européenne standard utilisant le modèle Black-Scholes."""
    d1 = (np.log(S0 / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)

    if option_type == "call":
        option_price = S0 * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    elif option_type == "put":
        option_price = K * np.exp(-r * T) * norm.cdf(-d2) - S0 * norm.cdf(-d1)
    else:
        raise ValueError("Invalid option type. Use 'call' or 'put'")

    return option_price


def down_and_out_european_call(S0, K, T, r, sigma, H, n_simulations=10000, n_steps=100):
    """Prix de l'option européenne down-and-out en utilisant une simulation Monte Carlo."""
    dt = T / n_steps
    discount = np.exp(-r * T)

    # Simulation des trajectoires du prix de l'actif
    stock_paths = np.zeros((n_simulations, n_steps))
    stock_paths[:, 0] = S0

    for t in range(1, n_steps):
        z = np.random.randn(n_simulations)
        stock_paths[:, t] = stock_paths[:, t - 1] * np.exp((r - 0.5 * sigma ** 2) * dt + sigma * np.sqrt(dt) * z)

    # Calcul du gain à maturité pour chaque trajectoire
    payoff = np.maximum(stock_paths[:, -1] - K, 0)

    # Annulation du gain pour les trajectoires ayant franchi la barrière
    avg_payoff = np.where(np.min(stock_paths, axis=1) < H, 0, payoff).mean()

    return discount * avg_payoff


# Paramètres de base
S0 = 100
K = 100
T = 1
r = 0.05
sigma = 0.2
H = 90

# Calculer les prix des options
european_standard_call = black_scholes_european(S0, K, T, r, sigma)
european_down_out_call = down_and_out_european_call(S0, K, T, r, sigma, H)

print(f"Prix de l'option standard européenne: {european_standard_call:.2f}")
print(f"Prix de l'option européenne down-and-out: {european_down_out_call:.2f}")
